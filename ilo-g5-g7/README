
Original Post Here:

https://sohabr.net/habr/post/218781/

Just Added Compatability with Zabbix 5 and pithon 5.30

В процессе внедрения Zabbix в нашей весьма разветвленной инфраструктуре, я столкнулся с необходимостью мониторинга аппаратной части довольно большого парка серверов HP Proliant разных моделей и поколений независимо от ОС и агентов HP.

Сама собой напрашивалась мысль реализовать все это через iLO, однако задача оказалась далеко не такой тривиальной, какой выглядела изначально. В итоге ее решения получилась довольно-таки интересная конструкция, которая:

Использует функцию discovery, избавляющую нас от необходимости задавать вручную вообще что-либо, кроме адреса iLO,
Отслеживает состояние температур, кулеров и питания на серверах Proliant, начиная от 5 поколения,
Отслеживает состояние памяти и жестких дисков на серверах Proliant, начиная от 7 поколения,
Собирает общую информацию для инвентаризации — серийные номера, номера модели, версии прошивок.


Теперь о том, как именно это было реализовано.

Казалось бы, все просто: iLO умеет отдавать данные через IPMI, а в Zabbix есть штатная поддержка этого протокола, но, как водится, гладко было на бумаге. При детальном рассмотрении вопроса сразу появились три проблемы:

Zabbix использует библиотеку openipmi, в которой есть баг — успешное соединение с iLO произойдет только в том случае, если оно инициировано от имени учетной записи, имеющей привилегии администратора. С точки зрения безопасности это в корне неправильно. Проблему можно решить патчем/обновлением, но она не избавляет от других,
Снятие информации с дискретных датчиков через IPMI не поддерживается,
И, наконец, для разных моделей серверов ключи, имена и количество датчиков различаются. Делать для каждой модели шаблоны вручную — крайне непродуктивно.


В связи с вышеизложенным, было принято решение написать отдельный механизм для взаимодействия с iLO, опираясь на скрипты и сторонние утилиты работы с IPMI. В качестве языка программирования был выбран perl, а в качестве источника данных — пакет FreeIPMI. На всех подопечных серверах в iLO была создана учетная запись мониторинга с read-only правами. Логически вся конструкция делится на две части: 

Скрипт обнаружения источников данных ilo_discovery.pl — опрашивает iLO на предмет поддерживаемых параметров и ключей, парсит их и выдает в формате, понятном Zabbix,
Скрипт получения данных ipmi_proliant.pl — по запросу выдает значение конкретного параметра.


Сразу хочу отметить, что программистом perl я не являюсь и использовал для решения задач те примеры и конструкции, которые мне были понятны, конечный же результат был достигнут — все это успешно работает.

Скрипт обнаружения

Этот скрипт выдает данные в формате zabbix discovery в зависимости от того, какой класс данных был запрошен — датчики, информация шасси и так далее. Подобное разделение обусловлено логикой шаблона, который используется совместно со скриптами.
ilo_discovery.pl


Скрипт получения данных

Этот скрипт выдает значение конкретных датчиков — опять же, в зависимости от того, какой класс данных был запрошен. Полученные данные кэшируются в текстовом файле, дабы случайно не заddosить iLO одновременными запросами.
ipmi_proliant.pl


Шаблон мониторинга

Написать скрипты — полдела. Нужно было еще правильно сконфигурировать импорт всей этой информации в Zabbix и настроить триггеры. Итогом этой работы явился шаблон мониторинга, в котором созданы правила обнаружения всех датчиков и иных источников данных с автоматическим созданием соответствующих триггеров и графиков.

Применение на практике

Для практического применения вышеописанной конструкции необходимо:

Скачать архив со скриптами и шаблоном, импортировать шаблон в Zabbix,
Положить скрипты ilo_discovery.pl и ipmi_proliant.pl в папку, указанную в качестве хранилища ExternalScripts в конфиге Zabbix, и сделать их исполняемыми,
Скачать и установить FreeIPMI (FAQ по сборке и зависимостям лежит тут):
# wget http://ftp.gnu.org/gnu/freeipmi/freeipmi-1.2.1.tar.gz 
# tar -xvzf freeipmi-1.2.1.tar.gz
# cd freeipmi-1.2.1
# ./configure --prefix=/usr --exec-prefix=/usr --sysconfdir=/etc --localstatedir=/var --mandir=/usr/share/man
# make install

Для 64-битных систем строка configure будет такой:
./configure --prefix=/usr --exec-prefix=/usr --sysconfdir=/etc --localstatedir=/var --mandir=/usr/share/man --libdir=/usr/lib64

Создать в iLO учетную запись для Zabbix и прописать ее данные в скриптах ($user и $pass),
Проверить, что FreeIPMI успешно подключается к iLO (адрес, логин и пароль подставляем свой):
# /usr/sbin/ipmi-sensors -D LAN2_0 -h 192.168.0.1 -u monitor -p P@$$w0rd -l USER -W discretereading --no-header-output --quiet-cache --sdr-cache-recreate --comma-separated-output --entity-sensor-names

В ответ мы должны получить список датчиков наподобие:
0,System Chassis 1 UID Light,OEM Reserved,N/A,N/A,'OEM Event = 0000h'
1,System Chassis 2 Health LED,OEM Reserved,N/A,N/A,'OEM Event = 0000h'
2,Processor Module VRM 1,Power Unit,N/A,N/A,'Device Inserted/Device Present'
3,Power Supply Power Supply 1,Power Supply,N/A,N/A,'Presence detected'

Проверить, что скрипт успешно парсит данные обнаружения (адрес подставляем свой):
# /usr/lib/zabbix/externalscripts/ilo_discovery.pl 192.168.0.1 sensor temp numeric

В ответ мы должны получить примерно такой вывод:
{
        "data":[
                {
                        "{#CLASS}":"sensor",
                        "{#KEY}":"Air Inlet 01-Inlet Ambient",
                        "{#SECTION}":"Temperature",
                        "{#TYPE}":"numeric",
                        "{#MEASURE}":"C"},
                {
                        "{#CLASS}":"sensor",
                        "{#KEY}":"Processor 02-CPU",
                        "{#SECTION}":"Temperature",
                        "{#TYPE}":"numeric",
                        "{#MEASURE}":"C"},

В веб-интерфейсе Zabbix для сервера, который мы хотим опрашивать через iLO, прописать адрес iLO в макросе {$ILO} (в поле адреса ipmi интерфейса ничего указывать не надо),
Привязать к этому серверу шаблон мониторинга iLO
Подождать, пока отработает обнаружение.
